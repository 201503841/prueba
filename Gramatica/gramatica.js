/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,22],$V4=[1,28],$V5=[1,26],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,29],$Va=[7,12,27,29,35,36,37,38],$Vb=[1,52],$Vc=[1,45],$Vd=[1,44],$Ve=[1,43],$Vf=[1,48],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,53],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[16,24,39,68,69,70,71,72,73,74,75,76,77,78,79,81],$Vy=[1,73],$Vz=[1,74],$VA=[1,76],$VB=[1,95],$VC=[1,94],$VD=[24,39],$VE=[16,24,39,68,69,72,73,74,75,76,77,78,79],$VF=[16,24,39,68,69,70,71,72,73,74,75,76,77,78,79],$VG=[16,24,39,72,73,74,75,76,77,78,79],$VH=[16,24,39,76,77,78,79],$VI=[7,9,12,27,29,35,36,37,38,59,60,62,63,67,89],$VJ=[1,118],$VK=[1,119],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,112],$VP=[1,116],$VQ=[1,117],$VR=[1,128],$VS=[1,132],$VT=[1,150],$VU=[1,151],$VV=[7,9,12,27,29,35,36,37,38,54,55,59,60,62,63,67,89],$VW=[1,168],$VX=[7,9,12,27,29,35,36,37,38,54,55,59,60,62,63,66,67,89],$VY=[9,12,27,29,35,36,37,38,54,55,59,60,62,63,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"CLASE":6,"public_":7,"TIPO_CLASE":8,"identificador":9,"llaveAbre":10,"SENTENCIAS_GLOBALES":11,"llaveCierra":12,"class_":13,"interface_":14,"SENTENCIAG":15,"puntoComa":16,"METODO":17,"DECLARACION_VARIABLE":18,"METODO_MAIN":19,"DECLARACION_METODO":20,"TIPO":21,"parAbre":22,"PARAMETROSI":23,"parCierra":24,"BLOQUE_SENTENCIAS":25,"static_":26,"void_":27,"main_":28,"string_":29,"cocheteAbre":30,"corcheteCierra":31,"args_":32,"LLAMADA_METODO":33,"PARAMETROS":34,"int_":35,"double_":36,"char_":37,"boolean_":38,"coma":39,"EXPRESION":40,"LISTA_SENTENCIAS":41,"SENTENCIAS":42,"IF":43,"FOR":44,"WHILE":45,"DO_WHILE":46,"RETURN":47,"PRINT":48,"ASIGNACION_VARIABLE":49,"CONTADOR":50,"BLOQUE_REPETICION":51,"SENTENCIAS_REPETICION":52,"REPETICION":53,"break_":54,"continue_":55,"incremento":56,"decremento":57,"igual":58,"for_":59,"while_":60,"CONDICION":61,"do_":62,"if_":63,"ELSEIF":64,"ELSE":65,"else_":66,"return_":67,"mas":68,"menos":69,"por":70,"division":71,"mayorQue":72,"menorQue":73,"mayorIgual":74,"menorIgual":75,"igualIgual":76,"diferenteA":77,"or_":78,"and_":79,"not_":80,"xor_":81,"EXP":82,"PRIMITIVO":83,"decimal":84,"cadena":85,"true_":86,"false_":87,"entero":88,"system_":89,"punto":90,"out_":91,"IMPRESION":92,"println_":93,"print_":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"public_",9:"identificador",10:"llaveAbre",12:"llaveCierra",13:"class_",14:"interface_",16:"puntoComa",22:"parAbre",24:"parCierra",26:"static_",27:"void_",28:"main_",29:"string_",30:"cocheteAbre",31:"corcheteCierra",32:"args_",35:"int_",36:"double_",37:"char_",38:"boolean_",39:"coma",54:"break_",55:"continue_",56:"incremento",57:"decremento",58:"igual",59:"for_",60:"while_",62:"do_",63:"if_",66:"else_",67:"return_",68:"mas",69:"menos",70:"por",71:"division",72:"mayorQue",73:"menorQue",74:"mayorIgual",75:"menorIgual",76:"igualIgual",77:"diferenteA",78:"or_",79:"and_",80:"not_",81:"xor_",82:"EXP",84:"decimal",85:"cadena",86:"true_",87:"false_",88:"entero",89:"system_",90:"punto",91:"out_",93:"println_",94:"print_"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[6,2],[8,1],[8,1],[11,2],[11,1],[11,2],[15,1],[15,2],[15,1],[15,1],[17,7],[19,11],[20,7],[33,5],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[23,4],[23,2],[34,3],[34,1],[25,3],[25,2],[41,2],[41,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[42,2],[42,1],[42,2],[51,3],[51,2],[52,2],[52,1],[53,1],[53,1],[53,2],[53,2],[53,1],[53,1],[53,1],[53,2],[53,2],[53,1],[53,2],[50,2],[50,2],[18,4],[18,2],[49,3],[44,9],[45,3],[46,5],[43,3],[43,4],[43,4],[64,4],[64,5],[64,5],[65,2],[47,2],[47,3],[61,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,2],[40,3],[40,1],[40,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[48,7],[92,1],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      var root = new AST($$[$0-1]);
      return root;

break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 10: case 33:
this.$= [$$[$0]];
break;
case 4:
 this.$= new Clase($$[$0-3],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 5:
 this.$= new Clase($$[$0-2],null, this._$.first_line, this._$.first_column); 
break;
case 6: case 11:
console.error('Error sint√°ctico: ' + yytext + '| linea: ' + this._$.first_line + ' | columna: ' + this._$.first_column); 
break;
case 7: case 8: case 12: case 14: case 15: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 43: case 49: case 50: case 53: case 54: case 55: case 58: case 94: case 95: case 103: case 104:
 this.$ = $$[$0]; 
break;
case 9: case 32:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 13: case 30: case 41: case 42: case 44: case 45: case 51: case 52: case 56: case 57: case 59: case 93:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = new Metodo($$[$0-4],$$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 17:
 this.$ = new MetodoMain($$[$0-7],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 18:
 this.$ = new DeclaracionM($$[$0-4],$$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 19:
 this.$ = new Llamada($$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column);
break;
case 20:
 this.$ = Tipo.INT; 
break;
case 21:
 this.$ = Tipo.DOUBLE; 
break;
case 22:
 this.$ = Tipo.STRING; 
break;
case 23:
 this.$ = Tipo.CHAR; 
break;
case 24:
 this.$ = Tipo.VOID; 
break;
case 25:
 this.$ = Tipo.BOOLEAN; 
break;
case 26:
 $$[$0-3].push($$[$0]); this.$=$$[$0-3]; 
break;
case 27:
this.$ = [$$[$0]];
break;
case 28:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 29:
this.$=[$$[$0]];
break;
case 46:
 this.$ = []; 
break;
case 47:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 48:
 this.$=[$$[$0]];
break;
case 60: case 61:
 this.$= new Contador($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$= new Declaracion($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$= new Declaracion($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new Asignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new DoWhile($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new If($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69: case 70:
 this.$ = new If($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new ElseIf($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 72: case 73:
 this.$ = new ElseIf($$[$0-3], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = new Else($$[$0], this._$.first_line, this._$.first_column); 
break;
case 75:
 this.$ = new Return( null, this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = new Return( $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$=$$[$0-1];
break;
case 78:
 this.$ = new OpAritmetica( TipoOperacion.SUMA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = new OpAritmetica( TipoOperacion.RESTA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = new OpAritmetica( TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = new OpAritmetica( TipoOperacion.DIVISION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 82:
 this.$ = new OpRelacional( TipoOperacion.MAYOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = new OpRelacional( TipoOperacion.MENOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = new OpRelacional( TipoOperacion.MAYORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = new OpRelacional( TipoOperacion.MENORIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = new OpRelacional( TipoOperacion.IGUALIGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = new OpRelacional( TipoOperacion.DISTINTO, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = new OpLogicas( TipoOperacion.OR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = new OpLogicas( TipoOperacion.AND, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 90:
 this.$ = new OpLogicas( TypeOperation.NOT, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 91:
 this.$ = new OpLogicas( TipoOperacion.XOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 92:
 this.$ = new OpAritmetica( TypeOperation.MENOSUNARIO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 96: case 97:
 this.$ = new Primitivo( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 98:
 this.$ = new Primitivo( true, this._$.first_line, this._$.first_column); 
break;
case 99:
 this.$ = new Primitivo( false, this._$.first_line, this._$.first_column); 
break;
case 100:
 this.$ = new Identificador( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 101:
this.$=Number($$[$0]);
break;
case 102:
 this.$ = new Print( $$[$0-1], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:8,13:[1,9],14:[1,10]},{12:[1,11]},{1:[2,1]},o($V2,[2,2]),{9:[1,12]},{9:[2,7]},{9:[2,8]},o($V2,[2,6]),{10:[1,13]},{2:[1,17],7:$V3,11:14,12:[1,15],15:16,17:18,18:19,19:20,20:21,21:23,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{7:$V3,12:[1,30],15:31,17:18,18:19,19:20,20:21,21:23,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},o($V2,[2,5]),o($Va,[2,10]),{16:[1,32]},o($Va,[2,12]),{16:[1,33]},o($Va,[2,14]),o($Va,[2,15]),{21:34,26:[1,35],27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{9:[1,36]},{9:[2,20]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{9:[2,24]},{9:[2,25]},o($V2,[2,4]),o($Va,[2,9]),o($Va,[2,11]),o($Va,[2,13]),{9:[1,37]},{27:[1,38]},{16:[2,63],58:[1,39]},{22:[1,40]},{28:[1,41]},{9:$Vb,22:$Vc,40:42,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{21:55,23:54,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{22:[1,56]},{16:[2,62],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{9:$Vb,22:$Vc,40:70,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{82:[1,71]},{9:$Vb,22:$Vc,40:72,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Vx,[2,94]),o($Vx,[2,95]),o($Vx,[2,96]),o($Vx,[2,97]),o($Vx,[2,98]),o($Vx,[2,99]),o($Vx,[2,100],{56:$Vy,57:$Vz}),o($Vx,[2,101]),{24:[1,75],39:$VA},{9:[1,77]},{29:[1,78]},{9:$Vb,22:$Vc,40:79,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:80,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:81,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:82,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:83,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:84,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:85,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:86,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:87,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:88,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:89,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:90,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,40:91,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Vx,[2,90]),o($Vx,[2,92]),{24:[1,92],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($Vx,[2,60]),o($Vx,[2,61]),{10:$VB,16:$VC,25:93},{21:96,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},o($VD,[2,27]),{30:[1,97]},o($VE,[2,78],{70:$Vm,71:$Vn,81:$Vw}),o($VE,[2,79],{70:$Vm,71:$Vn,81:$Vw}),o($VF,[2,80],{81:$Vw}),o($VF,[2,81],{81:$Vw}),o($VG,[2,82],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,81:$Vw}),o($VG,[2,83],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,81:$Vw}),o($VG,[2,84],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,81:$Vw}),o($VG,[2,85],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,81:$Vw}),o($VH,[2,86],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,81:$Vw}),o($VH,[2,87],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,81:$Vw}),o([16,24,39,78],[2,88],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,79:$Vv,81:$Vw}),o([16,24,39,78,79],[2,89],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,81:$Vw}),o($Vx,[2,91]),o($Vx,[2,93]),o($Va,[2,16]),o($VI,[2,18]),{7:$VJ,9:$VK,12:[1,99],18:108,20:107,21:23,27:$V4,29:$V5,33:110,35:$V6,36:$V7,37:$V8,38:$V9,41:98,42:100,43:101,44:102,45:103,46:104,47:105,48:106,49:109,50:111,59:$VL,60:$VM,62:$VN,63:$VO,67:$VP,89:$VQ},{9:[1,120]},{31:[1,121]},{7:$VJ,9:$VK,12:[1,122],18:108,20:107,21:23,27:$V4,29:$V5,33:110,35:$V6,36:$V7,37:$V8,38:$V9,42:123,43:101,44:102,45:103,46:104,47:105,48:106,49:109,50:111,59:$VL,60:$VM,62:$VN,63:$VO,67:$VP,89:$VQ},o($Va,[2,31]),o($VI,[2,33]),o($VI,[2,34]),o($VI,[2,35]),o($VI,[2,36]),o($VI,[2,37]),o($VI,[2,38]),o($VI,[2,39]),o($VI,[2,40]),{16:[1,124]},{16:[1,125]},o($VI,[2,43]),{16:[1,126]},{22:$VR,61:127},{22:[1,129]},{22:$VR,61:130},{10:$VS,51:131},{9:$Vb,16:[1,133],22:$Vc,40:134,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{90:[1,135]},{21:136,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{22:[1,138],56:$Vy,57:$Vz,58:[1,137]},o($VD,[2,26]),{32:[1,139]},o($Va,[2,30]),o($VI,[2,32]),o($VI,[2,41]),o($VI,[2,42]),o($VI,[2,44]),{10:$VS,51:140},{9:$Vb,22:$Vc,40:141,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{18:142,21:23,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{10:$VS,51:143},{60:[1,144]},{9:$VK,12:[1,146],18:155,21:23,27:$V4,29:$V5,33:157,35:$V6,36:$V7,37:$V8,38:$V9,43:148,44:149,45:152,46:153,48:154,49:156,50:158,52:145,53:147,54:$VT,55:$VU,59:$VL,60:$VM,62:$VN,63:$VO,89:$VQ},o($VI,[2,75]),{16:[1,159],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{91:[1,160]},{9:[1,161]},{9:$Vb,22:$Vc,40:162,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{9:$Vb,22:$Vc,34:163,40:164,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{24:[1,165]},o($VV,[2,68],{64:166,65:167,66:$VW}),{24:[1,169],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{16:[1,170]},o($VV,[2,66]),{22:$VR,61:171},{9:$VK,12:[1,172],18:155,21:23,27:$V4,29:$V5,33:157,35:$V6,36:$V7,37:$V8,38:$V9,43:148,44:149,45:152,46:153,48:154,49:156,50:158,53:173,54:$VT,55:$VU,59:$VL,60:$VM,62:$VN,63:$VO,89:$VQ},o($VX,[2,46]),o($VY,[2,48]),o($VY,[2,49]),o($VY,[2,50]),{16:[1,174]},{16:[1,175]},o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,55]),{16:[1,176]},{16:[1,177]},o($VY,[2,58]),{16:[1,178]},o($VI,[2,76]),{90:[1,179]},{22:[1,180]},{16:[2,64],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{24:[1,181],39:[1,182]},o($VD,[2,29],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw}),{10:$VB,25:183},o($VV,[2,69]),o($VV,[2,70]),{10:$VS,51:185,63:[1,184]},o([10,16],[2,77]),{9:$Vb,22:$Vc,40:186,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{16:[1,187]},o($VX,[2,45]),o($VY,[2,47]),o($VY,[2,51]),o($VY,[2,52]),o($VY,[2,56]),o($VY,[2,57]),o($VY,[2,59]),{92:188,93:[1,189],94:[1,190]},{21:55,23:191,27:$V4,29:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{16:[1,192]},{9:$Vb,22:$Vc,40:193,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Va,[2,17]),{22:$VR,61:194},o($VV,[2,74]),{16:[1,195],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VV,[2,67]),{22:$VR,61:196},{22:[2,103]},{22:[2,104]},{24:[1,197],39:$VA},o($VV,[2,19]),o($VD,[2,28],{68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw}),{10:$VS,51:198},{9:$Vb,22:$Vc,40:199,50:47,69:$Vd,80:$Ve,83:46,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{16:[1,200]},{16:$VC},o($VV,[2,71],{64:201,65:202,66:$VW}),{24:[1,203],68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VV,[2,102]),o($VV,[2,72]),o($VV,[2,73]),{10:$VS,51:204},o($VV,[2,65])],
defaultActions: {6:[2,1],9:[2,7],10:[2,8],24:[2,20],25:[2,21],26:[2,22],27:[2,23],28:[2,24],29:[2,25],189:[2,103],190:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

      const { Instruccion } = require("../dist/ast/Instruccion");
	const { AST } = require("../dist/ast/AST");
	const { Asignacion } = require("../dist/ast/instrucciones/Asignacion");
      const { Clase } = require("../dist/ast/instrucciones/Clase");
      const { Contador } = require("../dist/ast/instrucciones/Contador");
	const { Declaracion } = require("../dist/ast/instrucciones/Declaracion");
      const { DeclaracionM } = require("../dist/ast/instrucciones/DeclaracionM");
	const { DoWhile } = require("../dist/ast/instrucciones/DoWhile");
      const { Else } = require("../dist/ast/instrucciones/Else");
      const { ElseIf } = require("../dist/ast/instrucciones/ElseIf");
      const { For } = require("../dist/ast/instrucciones/For");
      const { If } = require("../dist/ast/instrucciones/If");
	const { Llamada } = require("../dist/ast/instrucciones/Llamada");
      const { Metodo } = require("../dist/ast/instrucciones/Metodo");
      const { MetodoMain } = require("../dist/ast/instrucciones/MetodoMain");
      const { Print } = require("../dist/ast/instrucciones/Print");
      const { Return } = require("../dist/ast/instrucciones/Return");
      const { While } = require("../dist/ast/instrucciones/While");
	const { OpAritmetica } = require("../dist/ast/expresiones/OpAritmetica");
	const { OpLogicas } = require("../dist/ast/expresiones/OpLogicas");
	const { OpRelacional } = require("../dist/ast/expresiones/OpRelacional");
	const { Identificador } = require("../dist/ast/expresiones/Identificador");
	const { Primitivo } = require("../dist/ast/expresiones/Primitivo");
	const { Tipo } = require("../dist/ast/Tipo");
	const { TipoOperacion } = require("../dist/ast/Tipo");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorando los espacios en blanco
break;
case 1:// ignore comment line 
break;
case 2://ignore comment Multilinea
break;
case 3:return 7;
break;
case 4:return 13;
break;
case 5:return 14;
break;
case 6:return 27;
break;
case 7:return 26;
break;
case 8:return 28;
break;
case 9:return 32;
break;
case 10:return 35;
break;
case 11:return 29;
break;
case 12:return 38;
break;
case 13:return 36;
break;
case 14:return 37;
break;
case 15:return 59;
break;
case 16:return "do_";
break;
case 17:return 60;
break;
case 18:return 63;
break;
case 19:return 66;    
break;
case 20:return 89;
break;
case 21:return 91;
break;
case 22:return 93;
break;
case 23:return 94;
break;
case 24:return 87;
break;
case 25:return 86;
break;
case 26:return 54;
break;
case 27:return 55;
break;
case 28:return 67;
break;
case 29:return 22;
break;
case 30:return 24;
break;
case 31:return 39;
break;
case 32:return 10;
break;
case 33:return 12;
break;
case 34:return 16;
break;
case 35:return 90;
break;
case 36:return 30;
break;
case 37:return 31;
break;
case 38:return 56;
break;
case 39:return 57;
break;
case 40:return 68;
break;
case 41:return 69;
break;
case 42:return 70;
break;
case 43:return 71;
break;
case 44:return 79;
break;
case 45:return 78;
break;
case 46:return 80;
break;
case 47:return 81;
break;
case 48:return 74;
break;
case 49:return 75;
break;
case 50:return 76;
break;
case 51:return 77;
break;
case 52:return 73;
break;
case 53:return 72;
break;
case 54:return 58;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; /*//"*/ 
break;
case 56:
break;
case 57:
break;
case 58:return 88;
break;
case 59:return 84;
break;
case 60:return 'negativo';
break;
case 61:return 9;
break;
case 62:return 5;
break;
case 63: 
		console.error('Error l√©xico: ' + yy_.yytext + ', line: ' + yy_.yylloc.first_line + ', column: ' + yy_.yylloc.first_column); 
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:"[^\"]*")/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:(-)[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}